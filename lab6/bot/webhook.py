import asyncio
import logging
import os
import string
import random
import pymongo
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils.executor import start_webhook
from aiogram.contrib.fsm_storage.memory import MemoryStorage

API_TOKEN = os.environ['TG_TOKEN']


# webhook settings
WEBHOOK_HOST = 'https://mbard.alwaysdata.net/'
WEBHOOK_PATH = '/bot/'
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# webserver settings
WEBAPP_HOST = '::'  # or ip
WEBAPP_PORT = 8350

logging.basicConfig(level=logging.INFO)

loop = asyncio.get_event_loop()
bot = Bot(token=API_TOKEN, loop=loop)
dp = Dispatcher(bot, storage=MemoryStorage())

# connect to DB
client = pymongo.MongoClient(
    "mongodb+srv://maksymbardakh:qwerty1234@cluster0.lzmhsjl.mongodb.net/?retryWrites=true&w=majority")
db = client.get_database("mbardBotDB")

# general parameters
passwords = {}
last_generated_password = None
digits = False
special_chars = False
length = 8


class WaitingState(StatesGroup):
    waiting_for_new_length = State()
    waiting_for_creation_name = State()
    waiting_for_deleting_name = State()


@dp.message_handler(commands=['start'])
async def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—å")
    btn2 = types.KeyboardButton("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏")
    btn3 = types.KeyboardButton("–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–∞—Ä–æ–ª—ñ")
    markup.add(btn1, btn2, btn3)
    await bot.send_message(message.chat.id,
                           text="–ü—Ä–∏–≤—ñ—Ç, {0.first_name}! –Ø –±–æ—Ç, –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª—ñ–≤üõ°.".format(message.from_user),
                           reply_markup=markup)


@dp.message_handler(content_types=['text'])
async def func(message: types.Message, state: FSMContext):
    global special_chars, digits, last_generated_password
    if message.text == "–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—å" or message.text == "–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —ñ–Ω—à–∏–π":
        password = await generate_password()
        last_generated_password = password
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ó–±–µ—Ä–µ–≥—Ç–∏ –ø–∞—Ä–æ–ª—å")
        btn2 = types.KeyboardButton("–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —ñ–Ω—à–∏–π")
        btn3 = types.KeyboardButton("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏")
        back = types.KeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")

        markup.add(btn1, btn2, btn3, back)
        await bot.send_message(message.chat.id, text=f'–í–∞—à –ø–∞—Ä–æ–ª—å: {password}', reply_markup=markup)

    elif message.text == "–ü–∞—Ä–∞–º–µ—Ç—Ä–∏":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ –¥–æ–≤–∂–∏–Ω—É –ø–∞—Ä–æ–ª—è")

        if digits:
            btn2 = types.KeyboardButton("–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—ñ –±–µ–∑ —Ü–∏—Ñ—Ä")
        else:
            btn2 = types.KeyboardButton("–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—ñ –∑ —Ü–∏—Ñ—Ä–∞–º–∏")

        if special_chars:
            btn3 = types.KeyboardButton("–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—ñ –±–µ–∑ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤")
        else:
            btn3 = types.KeyboardButton("–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—ñ –∑—ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏")

        back = types.KeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
        markup.add(btn1, btn2, btn3, back)

        await bot.send_message(message.chat.id,
                               text=f'–ü–æ—Ç–æ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏: \r\n –î–æ–≤–∂–∏–Ω–∞ –ø–∞—Ä–æ–ª—è: {length}'
                                    f'\r\n –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü–∏—Ñ—Ä: {digits}'
                                    f'\r\n –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤: {special_chars}',
                               reply_markup=markup)

    elif message.text == "–ó–º—ñ–Ω–∏—Ç–∏ –¥–æ–≤–∂–∏–Ω—É –ø–∞—Ä–æ–ª—è":
        await bot.send_message(message.chat.id, text='–í–≤–µ–¥—ñ—Ç—å –±–∞–∂–∞–Ω—É –¥–æ–≤–∂–∏–Ω—É:')
        await WaitingState.waiting_for_new_length.set()

    elif message.text == "–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—ñ –∑ —Ü–∏—Ñ—Ä–∞–º–∏":
        digits = True
        await bot.send_message(message.chat.id, text="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω—ñ")

    elif message.text == "–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—ñ –±–µ–∑ —Ü–∏—Ñ—Ä":
        digits = False
        await bot.send_message(message.chat.id, text="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω—ñ")

    elif message.text == "–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—ñ –∑—ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏":
        special_chars = True
        await bot.send_message(message.chat.id, text="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω—ñ")

    elif message.text == "–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—ñ –±–µ–∑ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤":
        special_chars = False
        await bot.send_message(message.chat.id, text="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω—ñ")

    elif message.text == "–ü–æ–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—å")
        btn2 = types.KeyboardButton("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏")
        btn3 = types.KeyboardButton("–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–∞—Ä–æ–ª—ñ")
        markup.add(btn1, btn2, btn3)
        await bot.send_message(message.chat.id, text="–ß–µ–∫–∞—é –Ω–æ–≤–∏—Ö –∫–æ–º–∞–Ω–¥", reply_markup=markup)

    elif message.text == "–ó–±–µ—Ä–µ–≥—Ç–∏ –ø–∞—Ä–æ–ª—å":
        await bot.send_message(message.chat.id, text='–í–≤–µ–¥—ñ—Ç—å —ñ–º\'—è –ø–∞—Ä–æ–ª—é:')
        await WaitingState.waiting_for_creation_name.set()

    elif message.text == "–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–∞—Ä–æ–ª—ñ":
        user_id = message.from_user.id
        saved_passwords = await get_saved_passwords(user_id)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

        if saved_passwords:
            btn1 = types.KeyboardButton("–í–∏–¥–∞–ª–∏—Ç–∏ –ø–∞—Ä–æ–ª—å")
            back = types.KeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
            markup.add(btn1, back)
            response_text = "–í–∞—à—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–∞—Ä–æ–ª—ñ:\n"
            for password_info in saved_passwords:
                response_text += f"_*{password_info['name']}*_: {password_info['password']}\n"
        else:
            btn1 = types.KeyboardButton("–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—å")
            btn2 = types.KeyboardButton("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏")
            btn3 = types.KeyboardButton("–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–∞—Ä–æ–ª—ñ")
            markup.add(btn1, btn2, btn3)
            response_text = "–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø–∞—Ä–æ–ª—ñ–≤."

        await bot.send_message(message.chat.id, text=response_text, parse_mode=types.ParseMode.MARKDOWN_V2,
                               reply_markup=markup)

    elif message.text == "–í–∏–¥–∞–ª–∏—Ç–∏ –ø–∞—Ä–æ–ª—å":
        await bot.send_message(message.chat.id, text='–í–≤–µ–¥—ñ—Ç—å —ñ–º\'—è –ø–∞—Ä–æ–ª—é:')
        await WaitingState.waiting_for_deleting_name.set()


@dp.message_handler(state=WaitingState.waiting_for_new_length)
async def func(message: types.Message, state: FSMContext):
    global length
    try:
        length = int(message.text)
        if length < 4 or length > 25:
            await bot.send_message(message.chat.id, text='–ë—É–¥—å –ª–∞—Å–∫–∞ –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ —É –ø—Ä–æ–º—ñ–∂–∫—É –≤—ñ–¥ 4 –¥–æ 25')
    except ValueError:
        await bot.send_message(message.chat.id, text='–ë—É–¥—å –ª–∞—Å–∫–∞ –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ')
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—å")
        btn2 = types.KeyboardButton("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏")
        btn3 = types.KeyboardButton("–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–∞—Ä–æ–ª—ñ")
        markup.add(btn1, btn2, btn3)
        await bot.send_message(message.chat.id, text='–î–æ–≤–∂–∏–Ω–∞ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–∞', reply_markup=markup)
        await state.finish()


@dp.message_handler(state=WaitingState.waiting_for_creation_name)
async def func(message: types.Message, state: FSMContext):
    global last_generated_password, passwords
    name = message.text
    user = message.from_user.id
    result = await save_password(user, name, last_generated_password)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—å")
    btn2 = types.KeyboardButton("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏")
    btn3 = types.KeyboardButton("–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–∞—Ä–æ–ª—ñ")
    markup.add(btn1, btn2, btn3)
    await bot.send_message(message.chat.id, text=result, reply_markup=markup)
    await state.finish()


@dp.message_handler(state=WaitingState.waiting_for_deleting_name)
async def func(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    password_name = message.text
    deleted = await delete_saved_password(user_id, password_name)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—å")
    btn2 = types.KeyboardButton("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏")
    btn3 = types.KeyboardButton("–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–∞—Ä–æ–ª—ñ")
    markup.add(btn1, btn2, btn3)
    if deleted:
        await bot.send_message(
            message.chat.id, text=f"–ü–∞—Ä–æ–ª—å '{password_name}' –≤–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.", reply_markup=markup
        )
    else:
        await bot.send_message(
            message.chat.id, text=f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø–∞—Ä–æ–ª—å '{password_name}'.", reply_markup=markup
        )

    await state.finish()


async def generate_password():
    global length, digits, special_chars

    characters = string.ascii_letters
    if digits:
        characters += string.digits
    if special_chars:
        characters += "$%&?@"

    password = ''.join(random.choice(characters) for _ in range(length))
    return password


async def save_password(user_id, name, password):
    try:
        passwords_collection = db.get_collection("passwords")
        passwords_collection.insert_one({"user": user_id, "name": name, "password": password})
        return "–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ"
    except Exception as e:
        return f"–ü—ñ–¥ —á–∞—Å –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}"


async def get_saved_passwords(user_id):
    passwords_collection = db.get_collection("passwords")
    saved_passwords = passwords_collection.find({"user": user_id})
    return saved_passwords


async def delete_saved_password(user_id, password_name):
    passwords_collection = db.get_collection("passwords")
    result = passwords_collection.delete_one({"user": user_id, "name": password_name})
    return result.deleted_count > 0


async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)


async def on_shutdown(dp):
    pass


if __name__ == '__main__':
    start_webhook(dispatcher=dp, webhook_path=WEBHOOK_PATH, on_startup=on_startup, on_shutdown=on_shutdown,
                  skip_updates=True, host=WEBAPP_HOST, port=WEBAPP_PORT)
